using AutoGenerateDDDProjectForNetCore.controls;
using AutoGenerateDDDProjectForNetCore.models;

namespace AutoGenerateDDDProjectForNetCore.forms
{
    public partial class frmSelectEntity : Form
    {
        private string[] tables;
        private List<EntityModel> entities = new List<EntityModel>();

        public frmSelectEntity(string[] tables)
        {
            InitializeComponent();

            tvColumn.AfterCheck += TreeViewExtensions.TreeView_AfterCheck;
            tvDependency.AfterCheck += TreeViewExtensions.TreeView_AfterCheck;

            this.tables = tables;
        }

        private void TvDependency_AfterCheck(object? sender, TreeViewEventArgs e)
        {
            if (e.Node != null)
            {
                int index = entities.FindIndex(x => x.Entity == e.Node.Tag.ToString());
                if (e.Node.Checked)
                {
                    if (entities[index].Dependency.FindIndex(x => x == e.Node.Text) < 0)
                        entities[index].Dependency.Add(e.Node.Text);
                }
                else entities[index].Dependency.Remove(e.Node.Text);
            }
        }

        private void TvColumn_AfterCheck(object? sender, TreeViewEventArgs e)
        {
            if (e.Node != null)
            {
                entities[entities.FindIndex(x => x.Entity == e.Node.Text)].IsChecked = e.Node.Checked;
            }
        }

        private void frmSelectEntity_Load(object sender, EventArgs e)
        {
            foreach (string table in tables)
            {
                if (!table.Contains('_'))
                {
                    TreeNode node = tvColumn.Nodes.Add(table);
                    node.Checked = true;

                    EntityModel entity = new EntityModel
                    {
                        Entity = table,
                        Dependency = tables.Where(x => x != table).Where(x => x.StartsWith(table)).ToList(),
                        IsChecked = true
                    };
                    entities.Add(entity);
                }
            }
            tvColumn.AfterCheck += TvColumn_AfterCheck;
            tvDependency.AfterCheck += TvDependency_AfterCheck;
        }

        private void tvColumn_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            tvDependency.Nodes.Clear();
            string[] listDependency = tables.Where(x => x != e.Node.Text).Where(x => x.StartsWith(e.Node.Text)).ToArray();
            foreach (string table in listDependency)
            {
                TreeNode node = tvDependency.Nodes.Add(table);
                node.Tag = e.Node.Text;
                node.Checked = true;
            }
        }

        private void btnOK_Click(object sender, EventArgs e)
        {
            XMLSettings.Entities = entities;
            this.Close();
        }
    }
}