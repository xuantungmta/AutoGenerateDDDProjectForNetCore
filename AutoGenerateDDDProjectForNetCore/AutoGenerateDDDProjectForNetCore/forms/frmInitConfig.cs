using AutoGenerateDDDProjectForNetCore.services;
using System.ComponentModel;

namespace AutoGenerateDDDProjectForNetCore.forms
{
    public partial class frmInitConfig : Form
    {
        public delegate void TranformEventHandler(string connectionString);

        public event TranformEventHandler? Tranform;

        private string ConnectionString;

        public frmInitConfig()
        {
            InitializeComponent();
            InitializeValidateCompoent();
            ReadSettings();
        }

        private void ReadSettings(bool writeIfNotExist = true)
        {

            if (writeIfNotExist)
                XMLSettings.WriteDefaultSettings();

            XMLSettings.SQLServerName = XMLSettings.ReadValue("SQLServerName");
            XMLSettings.ShowToU = bool.Parse(XMLSettings.ReadValue("ShowToU"));
            XMLSettings.SQLUsername = XMLSettings.ReadValue("SQLUsername");
            XMLSettings.SQLPassword = XMLSettings.ReadValue("SQLPassword");

            txtSQLServerName.Text = XMLSettings.SQLServerName;
            txtUserName.Text = XMLSettings.SQLUsername;
            txtPassword.Text = XMLSettings.SQLPassword;
            if (XMLSettings.TypeSQL == "MSSQL") rbMsSql.Checked = true;
            else rbMySql.Checked = true;
        }

        private void InitializeValidateCompoent()
        {
            txtDatabaseName.Validating += field_Validating;
            txtProjectName.Validating += field_Validating;
            txtSQLServerName.Validating += field_Validating;
            txtUserName.Validating += field_Validating;
            txtPassword.Validating += field_Validating;
        }

        private void field_Validating(object? sender, CancelEventArgs e)
        {
            TextBox? textControl = sender as TextBox;
            if (textControl == null) return;
            if (string.IsNullOrEmpty(textControl.Text))
            {
                e.Cancel = true;
                textControl.Focus();
                errorProvider.SetError(textControl, $"Please enter {textControl.Name.Replace("txt", "")}!");
            }
            else
            {
                e.Cancel = false;
                errorProvider.SetError(textControl, null);
            }
        }

        private async void btnGenerate_Click(object sender, EventArgs e)
        {
            if (ValidateChildren(ValidationConstraints.Enabled))
            {
                ConnectionString = DatabaseService.GetMasterConnetionString(txtSQLServerName.Text.Trim(), txtUserName.Text.Trim(), txtPassword.Text.Trim());
                DatabaseService MasterService = new DatabaseService(ConnectionString);

                if (MasterService.CheckConnention())
                {
                    string[] listDatabse = MasterService.GetAllDatabase();
                    if (listDatabse.Length > 0 && !listDatabse.Contains(txtDatabaseName.Text.ToLower()))
                    {
                        this.Hide();
                        MessageBox.Show(this, $"Cannot find database with name {txtDatabaseName.Text}", "Notification");
                        this.Show(this.Parent);
                        return;
                    }
                    btnGenerate.Text = "Loading...";
                    if (Tranform != null) Tranform(ConnectionString);
                    await SaveConfig();
                    this.Close();
                }
                else
                {
                    this.Hide();
                    MessageBox.Show(this, $"Cannot connect to this server! Has errors: {MasterService.Message}", "Notification");
                    this.Show(this.Parent);
                }
            }
        }

        private Task SaveConfig()
        {
            return Task.Factory.StartNew(() =>
            {
                XMLSettings.WriteValue("SQLServerName", txtSQLServerName.Text.Trim());
                XMLSettings.WriteValue("SQLUsername", txtUserName.Text.Trim());
                XMLSettings.WriteValue("SQLPassword", txtPassword.Text.Trim());
                XMLSettings.WriteValue("TypeSQL", rbMsSql.Checked ? "MSSQL" : "MYSQL");

                XMLSettings.SQLServerName = txtSQLServerName.Text.Trim();
                XMLSettings.DatabaseName = txtDatabaseName.Text.Trim();
                XMLSettings.ProjectName = txtProjectName.Text.Trim();
                XMLSettings.SQLUsername = txtUserName.Text.Trim();
                XMLSettings.SQLPassword = txtPassword.Text.Trim();
                XMLSettings.GitUri = txtGitUri.Text.Trim();
                XMLSettings.TypeSQL = rbMsSql.Checked ? "MSSQL" : "MYSQL";
            });
        }

        private void txtProjectName_TextChanged(object sender, EventArgs e)
        {
            txtDatabaseName.Text = txtProjectName.Text.Trim();
        }

        private void frmInitConfig_FormClosed(object sender, FormClosedEventArgs e)
        {
            if (Tranform != null && string.IsNullOrEmpty(ConnectionString)) Tranform(string.Empty);
        }
    }
}