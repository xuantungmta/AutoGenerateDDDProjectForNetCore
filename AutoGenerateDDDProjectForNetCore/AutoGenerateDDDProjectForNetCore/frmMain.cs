using AutoGenerateDDDProjectForNetCore.controls;
using AutoGenerateDDDProjectForNetCore.forms;
using AutoGenerateDDDProjectForNetCore.helpers;
using AutoGenerateDDDProjectForNetCore.services;
using ScintillaNET;

namespace AutoGenerateDDDProjectForNetCore
{
    public partial class frmMain : Form
    {
        private string _connectionString = string.Empty;
        private TableService? TableService;
        private frmInitConfig frmConfig = new frmInitConfig();
        private frmSelectEntity frmEntity;

        CodeEditor TextArea = new CodeEditor();
        public frmMain()
        {
            InitializeComponent();
            frmConfig.Tranform += FrmConfig_Tranform;
            GenereateHelper.Logger += GenereateHelper_Logger;
        }

        private async void GenereateHelper_Logger(string message)
        {
            await txtLog.Debug(message);
        }

        private void InitializeTextEditor()
        {
            TextPanel.Controls.Add(TextArea);
            TextArea.Dock = System.Windows.Forms.DockStyle.Fill;
        }

        private async void FrmConfig_Tranform(string connectionString)
        {
            if (string.IsNullOrEmpty(connectionString))
                this.Close();
            else
            {
                _connectionString = connectionString;
                await txtLog.Info($"Connection string: {connectionString}");
                GenerateProject();
            }
        }

        private async void GenerateProject()
        {
            FolderBrowserDialog fbd = new FolderBrowserDialog();
            fbd.ShowNewFolderButton = true;
            pbLoading.StartProcess();
            await pbLoading.IncrementProcess();
            if (fbd.ShowDialog() == DialogResult.OK && !string.IsNullOrWhiteSpace(fbd.SelectedPath))
            {
                TableService = new TableService(_connectionString, XMLSettings.DatabaseName);
                string[] listTable = TableService.GetAllTable();
                if (listTable != null && listTable.Length >= 2)
                {
                    await txtLog.Info($"Select entities for domains");
                    await pbLoading.IncrementProcess();
                    frmEntity = new frmSelectEntity(listTable);
                    frmEntity.ShowDialog();
                    if (XMLSettings.Entities.Count == 0)
                        await txtLog.Warn($"Cannot found any entities for domains");

                    await txtLog.Info("Get columns for entities...");
                    XMLSettings.Entities = XMLSettings.Entities.Where(x => x.IsChecked).ToList();
                    foreach (var entity in XMLSettings.Entities)
                    {
                        entity.Columns = TableService.GetAllColumn(entity.Entity);
                        foreach (var dependency in entity.Dependency)
                        {
                            dependency.Columns = TableService.GetAllColumn(dependency.Entity);
                        }
                        await pbLoading.IncrementProcess();
                        await txtLog.Debug($"Table {entity.Entity} has {entity.Columns.Length} columns...");
                    }

                    try
                    {
                        await txtLog.Info($"Generating project to {fbd.SelectedPath}");
                        FileHelper.CreateDirectory(Path.Combine(fbd.SelectedPath, "Documents"));
                        FileHelper.CreateDirectory(Path.Combine(fbd.SelectedPath, "Backups"));

                        string rootPath = Path.Combine(fbd.SelectedPath, "SourceCodes");
                        FileHelper.CreateDirectory(rootPath);
                        if (new DirectoryInfo(rootPath).GetDirectories().Length > 0)
                        {
                            if (MessageBox.Show("SourceCodes directory not empty! Please check and try again!", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
                            {
#if RELEASE
                                GenerateProject();
                                return;
#else
                                Directory.Delete(rootPath, true);
                                FileHelper.CreateDirectory(rootPath);
#endif
                            }
                        }
                        await pbLoading.IncrementProcess();
                        await txtLog.Info($"Coping template files to this path...");
                        FileHelper.CopyDirectory(XMLSettings.TypeSQL == "MSSQL" ? "templates/mssql" : "templates/mysql", rootPath);
                        await pbLoading.IncrementProcess(10);
                        await txtLog.Info($"Making projects...");
                        FileHelper.MakeProject(rootPath);
                        await pbLoading.IncrementProcess();
                        await txtLog.Info($"Generate files for domain project...");
                        GenereateHelper.GenerateDomainProject(rootPath, XMLSettings.ProjectName, XMLSettings.Entities.ToArray());
                        await txtLog.Info($"Generate files for infrastructure project...");
                        GenereateHelper.GenerateInfrastructureProject(rootPath, XMLSettings.ProjectName, XMLSettings.Entities.ToArray());
                        await txtLog.Info($"Generate files for application project...");
                        GenereateHelper.GenerateApplicationProject(rootPath, XMLSettings.ProjectName, XMLSettings.Entities.ToArray());
                        await txtLog.Info($"Generate files for test project...");
                        GenereateHelper.GenerateTestProject(rootPath, XMLSettings.ProjectName, XMLSettings.Entities.ToArray());

                        fileDirectoryTree.Nodes.Clear();
                        fileDirectoryTree.LoadDirectory(rootPath);

#if RELEASE
                        if (fileDirectoryTree.Nodes.Count > 0)
                        {
                            fileDirectoryTree.Nodes[0].Expand();
                            fileDirectoryTree.Nodes[0].EnsureVisible();
                        }
#else
                        fileDirectoryTree.ExpandAll();
                        fileDirectoryTree.Nodes[0].EnsureVisible();
#endif
                    }
                    catch (Exception ex)
                    {
                        await txtLog.Debug(ex.Message);
                    }
                    finally { pbLoading.EndProcess(); }
                }
                else
                {
                    pbLoading.StartProcess();
                    if (MessageBox.Show("Can not found any tables on database. Do you want try again?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
                    {
                        GenerateProject();
                        return;
                    }
                }
            }
        }

        private void frmMain_Load(object sender, EventArgs e)
        {
            InitializeTextEditor();
            frmConfig.ShowDialog();
        }

        private void LoadDataFromFile(string path)
        {
            if (File.Exists(path))
            {
                TextArea.Text = File.ReadAllText(path);
            }
            else TextArea.Text = string.Empty;
        }

        private void fileDirectoryTree_MouseMove(object sender, MouseEventArgs e)
        {
            TreeNode theNode = this.fileDirectoryTree.GetNodeAt(e.X, e.Y);
            // Set a ToolTip only if the mouse pointer is actually paused on a node.  
            if (theNode != null && theNode.Tag != null)
            {
                // Change the ToolTip only if the pointer moved to a new node.  
                if (theNode.Tag.ToString() != this.treeToolTip.GetToolTip(this.fileDirectoryTree))
                    this.treeToolTip.SetToolTip(this.fileDirectoryTree, theNode.Tag.ToString());
            }
            else
            {
                // Pointer is not over a node so clear the ToolTip.
                this.treeToolTip.SetToolTip(this.fileDirectoryTree, "");
            }
        }

        private void fileDirectoryTree_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            TreeNode theNode = this.fileDirectoryTree.GetNodeAt(e.X, e.Y);

            if (theNode != null && theNode.Tag != null)
            {
                string path = theNode.Tag.ToString();
                LoadDataFromFile(path);
            }
        }

        private void fileDirectoryTree_BeforeSelect(object sender, TreeViewCancelEventArgs e)
        {
            if (fileDirectoryTree.SelectedNode != null)
                fileDirectoryTree.SelectedNode.BackColor = Color.White;
            e.Node.BackColor = Color.Yellow;
        }

        private void btnGenerate_Click(object sender, EventArgs e)
        {
            GenerateProject();
        }
    }
}