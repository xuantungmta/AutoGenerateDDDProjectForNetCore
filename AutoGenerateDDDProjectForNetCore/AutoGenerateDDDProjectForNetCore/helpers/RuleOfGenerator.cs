using AutoGenerateDDDProjectForNetCore.controls;
using AutoGenerateDDDProjectForNetCore.models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoGenerateDDDProjectForNetCore.helpers
{
    public class Convention
    {
        // Name
        public const string PROJECT_NAME = "[$project_name]";
        public const string SERVER_NAME = "[$server_name]";
        public const string DATBASE_NAME = "[$database_name]";
        public const string TABLE_NAME = "[$table_name]";

        // Entity
        public const string CONTENT_COLUMN = "[%Column]";
        public const string CONTENT_CREATE_FUNC = "[%CreateFunc]";
        public const string CONTENT_CHANGE_FUNC = "[%ChangeFunc]";

        public const string FILTER_FIELD = "";
    }

    public static class GenereateHelper
    {
        public delegate void LoggingEventHandler(string message);
        public static event LoggingEventHandler Logger;

        public static void Logging(string message)
        {
            if (Logger != null) Logger(message);
        }
        public static void GenerateDomainProject(string path, string projectName, EntityModel[] listEntity)
        {
            string pathDomainProject = Path.Combine(path, $"{projectName}.domain");
            // Generate entities
            Logging("Reading template file for entity...");
            string contentEntity = File.ReadAllText("templates/entity/Entity.tmp").Replace(Convention.PROJECT_NAME, projectName);

            foreach (EntityModel entity in listEntity)
            {
                Logging($"Generate class for {entity.Entity}");
                string pathEntity = Path.Combine(pathDomainProject, "entity", entity.Entity);
                Directory.CreateDirectory(pathEntity);

                string column = string.Empty;
                foreach (ColumnModel columnModel in entity.Columns)
                {
                    column += $"public virtual {ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable)} {columnModel.Name} {{ get; protected set; }}\n";
                }

                const string filterColumns = "CreatedDate|ModifiedDate|Status";
                string createFunc = $"public static {entity.Entity} Create(";
                foreach (ColumnModel columnModel in entity.Columns)
                {
                    if (filterColumns.Contains(columnModel.Name)) continue;
                    createFunc += $"{ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable)} {columnModel.Name.FirstCharToLowerCase()}, ";
                }
                createFunc = createFunc.Remove(createFunc.Length - 3) + ")\n{\n"; // remove ", " at end of line
                createFunc += $"{entity.Entity} item = new {entity.Entity}()\n{{";
                foreach (ColumnModel columnModel in entity.Columns)
                {
                    switch (columnModel.Name)
                    {
                        case "CreatedDate":
                            createFunc += $"CreatedDate=DateTime.Now,\n";
                            break;
                        case "ModifiedDate":
                            break;
                        case "Status":
                            createFunc += $"Status=(short)StatusEnum.Active,\n";
                            break;
                        default:
                            createFunc += $"{columnModel.Name}={columnModel.Name.FirstCharToLowerCase()},\n";
                            break;
                    }
                }
                createFunc += "};\nreturn item;\n}";

                createFunc = $"public static {entity.Entity} Create(";
                foreach (ColumnModel columnModel in entity.Columns)
                {
                    if (columnModel.IsIdentity) continue;
                    createFunc += $"{ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable)} {columnModel.Name.FirstCharToLowerCase()}, ";
                }
                createFunc = createFunc.Remove(createFunc.Length - 3) + ")\n{\n"; // remove ", " at end of line
                createFunc += "return Create(new Id64Generator().GenerateId(),\n";
                foreach (ColumnModel columnModel in entity.Columns)
                {
                    if (filterColumns.Contains(columnModel.Name)) continue;
                    createFunc += $"{columnModel.Name.FirstCharToLowerCase()}, ";
                }
                createFunc = createFunc.Remove(createFunc.Length - 3) + ");\n}\n"; // remove ", " at end of line

                string content = contentEntity
                .Replace(Convention.TABLE_NAME, entity.Entity)
                .Replace(Convention.CONTENT_COLUMN, column)
                .Replace(Convention.CONTENT_CREATE_FUNC, createFunc);
                File.WriteAllText(Path.Combine(pathEntity, $"{entity.Entity}.cs"), content);
            }
        }

        public static void GenerateFileApi(string path, string projectName, string tableName)
        {
            throw new DirectoryNotFoundException();
        }
    }
}
