using AutoGenerateDDDProjectForNetCore.controls;
using AutoGenerateDDDProjectForNetCore.models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoGenerateDDDProjectForNetCore.helpers
{
    internal class Convention
    {
        // Name
        internal const string PROJECT_NAME = "[$project_name]";
        internal const string SERVER_NAME = "[$server_name]";
        internal const string DATBASE_NAME = "[$database_name]";
        internal const string TABLE_NAME = "[$table_name]";

        // Entity
        internal const string CONTENT_COLUMN = "[%Column]";
        internal const string CONTENT = "[%Content]";
        internal const string CONTENT_CREATE_FUNC = "[%CreateFunc]";
        internal const string CONTENT_CHANGE_FUNC = "[%ChangeFunc]";

    }

    public static class GenereateHelper
    {
        public delegate void LoggingEventHandler(string message);
        public static event LoggingEventHandler Logger;

        public static void Logging(string message)
        {
            if (Logger != null) Logger(message);
        }
        public static void GenerateDomainProject(string path, string projectName, EntityModel[] listEntity)
        {
            string pathDomainProject = Path.Combine(path, $"{projectName}.domain");
            // Generate entities
            Logging("Reading template file for entity...");
            string contentEntity = File.ReadAllText("templates/entity/Entity.tmp").Replace(Convention.PROJECT_NAME, projectName);

            Logging("Reading template file created event...");
            string contentCreatedEvent = File.ReadAllText("templates/entity/EntityCreatedEvent.tmp").Replace(Convention.PROJECT_NAME, projectName);

            Logging("Reading template file for interface of responsitory...");
            string contentInterface = File.ReadAllText("templates/entity/IResponsitory.tmp").Replace(Convention.PROJECT_NAME, projectName);
            string contentInterfaceExt = File.ReadAllText("templates/entity/IResponsitoryExt.tmp");
            string pathIRepository = Path.Combine(pathDomainProject, "responsitory", "interfaces");

            foreach (EntityModel entity in listEntity)
            {
                Logging($"Generate class for {entity.Entity}");
                string pathEntity = Path.Combine(pathDomainProject, "entity", entity.Entity);
                Directory.CreateDirectory(pathEntity);

                GenerateEntity(pathEntity, contentEntity, contentCreatedEvent, entity);

                #region dependency
                foreach (EntityModel dependency in entity.Dependency)
                    GenerateEntity(pathEntity, contentEntity, contentCreatedEvent, dependency);
                #endregion

                #region interface responsitory
                Logging($"Generate interface respository for {entity.Entity}");
                string iresContent = contentInterface.
                    Replace(Convention.TABLE_NAME, entity.Entity);

                bool isHadCategory = entity.Dependency.Count(x => x.Entity.Contains("Category")) > 0 || entity.Columns.Count(x => x.Name.Contains("CategoryId")) > 0;
                string extEntity = isHadCategory ? contentInterfaceExt.Replace(Convention.TABLE_NAME, entity.Entity) : string.Empty;
                iresContent = iresContent.Replace(Convention.CONTENT, extEntity);
                File.WriteAllText(Path.Combine(pathIRepository, $"I{entity.Entity}Responsitory.cs"), iresContent);
                #endregion
            }
        }

        public static void GenerateEntity(string path, string template, string templateCreatedEvent, EntityModel entity)
        {
            #region columns
            string column = string.Empty;
            foreach (ColumnModel columnModel in entity.Columns)
            {
                column += $"public virtual {ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable)} {columnModel.Name} {{ get; protected set; }}\n";
            }
            #endregion

            #region create function
            const string filterColumns = "CreatedDate|ModifiedDate|Status";
            string createFunc = $"public static {entity.Entity} Create(";
            foreach (ColumnModel columnModel in entity.Columns)
            {
                if (filterColumns.Contains(columnModel.Name)) continue;
                createFunc += $"{ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable)} {columnModel.Name.FirstCharToLowerCase()},\n";
            }
            createFunc = createFunc.Remove(createFunc.Length - 2) + ")\n{\n"; // remove ",\n" at end of line
                                                                              //validating
            foreach (ColumnModel columnModel in entity.Columns)
            {
                if (!columnModel.IsNullable && ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable) == "string")
                    createFunc += $"if (string.IsNullOrEmpty({columnModel.Name.FirstCharToLowerCase()}))\n" +
                                  $"throw new InvalidDataException(\"{columnModel.Name} must not be null\");\n";
            }

            createFunc += $"{entity.Entity} item = new {entity.Entity}()\n{{";
            foreach (ColumnModel columnModel in entity.Columns)
            {
                switch (columnModel.Name)
                {
                    case "CreatedDate":
                        createFunc += $"CreatedDate=DateTime.Now,\n";
                        break;
                    case "ModifiedDate":
                        break;
                    case "Status":
                        createFunc += $"Status=(short)StatusEnum.Active,\n";
                        break;
                    default:
                        createFunc += $"{columnModel.Name}={columnModel.Name.FirstCharToLowerCase()},\n";
                        break;
                }
            }
            createFunc += $"}};\nDomainEvents.Raise<{entity.Entity}CreatedEvent>(new {entity.Entity}CreatedEvent() {{ {entity.Entity} = item }});\nreturn item;\n}}\n";

            createFunc += $"public static {entity.Entity} Create(";
            foreach (ColumnModel columnModel in entity.Columns)
            {
                if (columnModel.Name == "ID") continue;
                createFunc += $"{ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable)} {columnModel.Name.FirstCharToLowerCase()},\n";
            }
            createFunc = createFunc.Remove(createFunc.Length - 2) + ")\n{\n"; // remove ",\n" at end of line
            createFunc += "return Create(new Id64Generator().GenerateId(),\n";
            foreach (ColumnModel columnModel in entity.Columns)
            {
                if (filterColumns.Contains(columnModel.Name) || columnModel.Name == "ID") continue;
                createFunc += $"{columnModel.Name.FirstCharToLowerCase()},\n";
            }
            createFunc = createFunc.Remove(createFunc.Length - 2) + ");\n}"; // remove ",\n" at end of line              
            #endregion

            #region change function
            const string filterColumns2 = "ID|CreatedDate|CreatedBy";
            string changeFunc = string.Empty;
            foreach (ColumnModel columnModel in entity.Columns)
            {
                if (filterColumns2.Contains(columnModel.Name)) continue;
                changeFunc += $"public void Change{columnModel.Name}({ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable)} {columnModel.Name.FirstCharToLowerCase()})" + "{\n";
                if (!columnModel.IsNullable && ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable) == "string")
                    changeFunc += $"if (string.IsNullOrEmpty({columnModel.Name.FirstCharToLowerCase()}))\n" +
                                  $"throw new InvalidDataException(\"{columnModel.Name} must not be null\");\n";
                changeFunc += $"this.{columnModel.Name}={columnModel.Name.FirstCharToLowerCase()};\n" +
                    $"//DomainEvents.Raise<{columnModel.Name}ChangedEvent>(new {entity.Entity}ChangedEvent() {{ {entity.Entity} = item }});\n" +
                    $"}}\n";
            }
            #endregion

            string content = template
            .Replace(Convention.TABLE_NAME, entity.Entity)
            .Replace(Convention.CONTENT_COLUMN, column)
            .Replace(Convention.CONTENT_CREATE_FUNC, createFunc)
            .Replace(Convention.CONTENT_CHANGE_FUNC, changeFunc);
            File.WriteAllText(Path.Combine(path, $"{entity.Entity}.cs"), content);

            #region created event
            Logging($"Generate created event for {entity.Entity}");
            string columnEvent = string.Empty;
            foreach (ColumnModel columnModel in entity.Columns)
            {
                columnEvent += $"this.Args.Add(\"{columnModel.Name}\", this.{entity.Entity}.{columnModel.Name});\n";
            }
            string createdEventContent = templateCreatedEvent.
            Replace(Convention.TABLE_NAME, entity.Entity).
            Replace(Convention.CONTENT_COLUMN, columnEvent);
            File.WriteAllText(Path.Combine(path, $"{entity.Entity}CreatedEvent.cs"), createdEventContent);
            #endregion
        }
    }
}
