using AutoGenerateDDDProjectForNetCore.controls;
using AutoGenerateDDDProjectForNetCore.models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoGenerateDDDProjectForNetCore.helpers
{
    internal class Convention
    {
        // Name
        internal const string PROJECT_NAME = "[$project_name]";
        internal const string SERVER_NAME = "[$server_name]";
        internal const string DATBASE_NAME = "[$database_name]";
        internal const string TABLE_NAME = "[$table_name]";
        internal const string TABLE_NAME_VARIBLE = "[$table_name_varible]";

        // Entity
        internal const string CONTENT_COLUMN = "[%Column]";
        internal const string CONTENT = "[%Content]";
        internal const string CONTENT_CREATE_FUNC = "[%CreateFunc]";
        internal const string CONTENT_CHANGE_FUNC = "[%ChangeFunc]";
        internal const string CONTENT_USING = "[%Using]";
    }

    public static class GenereateHelper
    {
        public delegate void LoggingEventHandler(string message);
        public static event LoggingEventHandler Logger;

        const string filterColumns = "CreatedDate|ModifiedDate|Status";
        const string filterColumns2 = "ID|CreatedDate|CreatedBy";

        public static void Logging(string message)
        {
            if (Logger != null) Logger(message);
        }
        public static void GenerateDomainProject(string path, string projectName, EntityModel[] listEntity)
        {
            string pathDomainProject = Path.Combine(path, $"{projectName}.domain");
            // Generate entities
            Logging("Reading template file for entity...");
            string contentEntity = File.ReadAllText("templates/entity/Entity.tmp").Replace(Convention.PROJECT_NAME, projectName);

            Logging("Reading template file created event...");
            string contentCreatedEvent = File.ReadAllText("templates/entity/EntityCreatedEvent.tmp").Replace(Convention.PROJECT_NAME, projectName);

            Logging("Reading template file for interface of responsitory...");
            string contentInterface = File.ReadAllText("templates/entity/IResponsitory.tmp").Replace(Convention.PROJECT_NAME, projectName);
            string contentInterfaceExt = File.ReadAllText("templates/entity/IResponsitoryExt.tmp");
            string pathIRepository = Path.Combine(pathDomainProject, "responsitory", "interfaces");

            foreach (EntityModel entity in listEntity)
            {
                Logging($"Generate class for {entity.Entity}");
                string pathEntity = Path.Combine(pathDomainProject, "entity", entity.Entity);
                Directory.CreateDirectory(pathEntity);

                GenerateEntity(pathEntity, contentEntity, contentCreatedEvent, entity);

                #region dependency
                foreach (EntityModel dependency in entity.Dependency)
                    GenerateEntity(pathEntity, contentEntity, contentCreatedEvent, dependency);
                #endregion

                #region interface responsitory
                Logging($"Generate interface respository for {entity.Entity}");
                string iresContent = contentInterface.
                    Replace(Convention.TABLE_NAME, entity.Entity);

                bool isHadCategory = entity.Dependency.Count(x => x.Entity.Contains("Category")) > 0 || entity.Columns.Count(x => x.Name.Contains("CategoryId")) > 0;
                string extEntity = isHadCategory ? contentInterfaceExt.Replace(Convention.TABLE_NAME, entity.Entity) : string.Empty;
                iresContent = iresContent.Replace(Convention.CONTENT, extEntity);
                File.WriteAllText(Path.Combine(pathIRepository, $"I{entity.Entity}Responsitory.cs"), iresContent);
                #endregion
            }
        }

        private static void GenerateEntity(string path, string template, string templateCreatedEvent, EntityModel entity)
        {
            #region columns
            string column = string.Empty;
            foreach (ColumnModel columnModel in entity.Columns)
            {
                column += $"public virtual {ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable)} {columnModel.Name} {{ get; protected set; }}\n";
            }
            #endregion

            #region create function            
            string createFunc = $"public static {entity.Entity} Create(";
            foreach (ColumnModel columnModel in entity.Columns)
            {
                if (filterColumns.Contains(columnModel.Name)) continue;
                createFunc += $"{ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable)} {columnModel.Name.FirstCharToLowerCase()},\n";
            }
            createFunc = createFunc.Remove(createFunc.Length - 2) + ")\n{\n"; // remove ",\n" at end of line
                                                                              //validating
            foreach (ColumnModel columnModel in entity.Columns)
            {
                if (!columnModel.IsNullable && ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable) == "string")
                    createFunc += $"if (string.IsNullOrEmpty({columnModel.Name.FirstCharToLowerCase()}))\n" +
                                  $"throw new InvalidDataException(\"{columnModel.Name} must not be null\");\n";
            }

            createFunc += $"{entity.Entity} item = new {entity.Entity}()\n{{";
            foreach (ColumnModel columnModel in entity.Columns)
            {
                switch (columnModel.Name)
                {
                    case "CreatedDate":
                        createFunc += $"CreatedDate=DateTime.Now,\n";
                        break;
                    case "ModifiedDate":
                        break;
                    case "Status":
                        createFunc += $"Status=(short)StatusEnum.Active,\n";
                        break;
                    default:
                        createFunc += $"{columnModel.Name}={columnModel.Name.FirstCharToLowerCase()},\n";
                        break;
                }
            }
            createFunc += $"}};\nDomainEvents.Raise<{entity.Entity}CreatedEvent>(new {entity.Entity}CreatedEvent() {{ {entity.Entity} = item }});\nreturn item;\n}}\n";

            createFunc += $"public static {entity.Entity} Create(";
            foreach (ColumnModel columnModel in entity.Columns)
            {
                if (filterColumns.Contains(columnModel.Name) || columnModel.Name == "ID") continue;
                createFunc += $"{ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable)} {columnModel.Name.FirstCharToLowerCase()},\n";
            }
            createFunc = createFunc.Remove(createFunc.Length - 2) + ")\n{\n"; // remove ",\n" at end of line
            createFunc += "return Create(new Id64Generator().GenerateId(),\n";
            foreach (ColumnModel columnModel in entity.Columns)
            {
                if (filterColumns.Contains(columnModel.Name) || columnModel.Name == "ID") continue;
                createFunc += $"{columnModel.Name.FirstCharToLowerCase()},\n";
            }
            createFunc = createFunc.Remove(createFunc.Length - 2) + ");\n}"; // remove ",\n" at end of line              
            #endregion

            #region change function            
            string changeFunc = string.Empty;
            foreach (ColumnModel columnModel in entity.Columns)
            {
                if (filterColumns2.Contains(columnModel.Name)) continue;
                changeFunc += $"public void Change{columnModel.Name}({ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable)} {columnModel.Name.FirstCharToLowerCase()})" + "{\n";
                if (!columnModel.IsNullable && ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable) == "string")
                    changeFunc += $"if (string.IsNullOrEmpty({columnModel.Name.FirstCharToLowerCase()}))\n" +
                                  $"throw new InvalidDataException(\"{columnModel.Name} must not be null\");\n";
                changeFunc += $"this.{columnModel.Name}={columnModel.Name.FirstCharToLowerCase()};\n" +
                    $"//DomainEvents.Raise<{columnModel.Name}ChangedEvent>(new {entity.Entity}ChangedEvent() {{ {entity.Entity} = item }});\n" +
                    $"}}\n";
            }
            #endregion

            string content = template
            .Replace(Convention.TABLE_NAME, entity.Entity)
            .Replace(Convention.CONTENT_COLUMN, column)
            .Replace(Convention.CONTENT_CREATE_FUNC, createFunc)
            .Replace(Convention.CONTENT_CHANGE_FUNC, changeFunc);
            File.WriteAllText(Path.Combine(path, $"{entity.Entity}.cs"), content);

            #region created event
            Logging($"Generate created event for {entity.Entity}");
            string columnEvent = string.Empty;
            foreach (ColumnModel columnModel in entity.Columns)
            {
                columnEvent += $"this.Args.Add(\"{columnModel.Name}\", this.{entity.Entity}.{columnModel.Name});\n";
            }
            string createdEventContent = templateCreatedEvent.
            Replace(Convention.TABLE_NAME, entity.Entity).
            Replace(Convention.CONTENT_COLUMN, columnEvent);
            File.WriteAllText(Path.Combine(path, $"{entity.Entity}CreatedEvent.cs"), createdEventContent);
            #endregion
        }

        public static void GenerateInfrastructureProject(string path, string projectName, EntityModel[] listEntity)
        {
            string pathInfrastructureProject = Path.Combine(path, $"{projectName}.infrastructure");
            // Generate entities
            Logging("Reading template file for responsitory...");
            string contentResponsitory = File.ReadAllText("templates/entity/Responsitory.tmp").Replace(Convention.PROJECT_NAME, projectName);
            string contentResponsitoryExt = File.ReadAllText("templates/entity/ResponsitoryExt.tmp").Replace(Convention.PROJECT_NAME, projectName);

            string pathResponsitory = Path.Combine(pathInfrastructureProject, "persistence", "instances");
            foreach (EntityModel entityModel in listEntity)
            {
                Logging($"Generate class for {entityModel.Entity}");
                bool isHadCategory = entityModel.Dependency.Count(x => x.Entity.Contains("Category")) > 0 || entityModel.Columns.Count(x => x.Name.Contains("CategoryId")) > 0;
                string extEntity = isHadCategory ? contentResponsitoryExt.Replace(Convention.TABLE_NAME, entityModel.Entity) : string.Empty;
                string content = contentResponsitory.
                    Replace(Convention.TABLE_NAME, entityModel.Entity).
                    Replace(Convention.CONTENT, extEntity);

                File.WriteAllText(Path.Combine(pathResponsitory, $"{entityModel.Entity}Responsitory.cs"), content);
            }
        }

        public static void GenerateApplicationProject(string path, string projectName, EntityModel[] listEntity)
        {
            string pathApplicationProject = Path.Combine(path, $"{projectName}.application");
            // Generate entities
            Logging("Reading template file for service...");
            string contentService = File.ReadAllText("templates/entity/Service.tmp").Replace(Convention.PROJECT_NAME, projectName);
            string contentServiceWithCategory = File.ReadAllText("templates/entity/ServiceWithCategory.tmp").Replace(Convention.PROJECT_NAME, projectName);
            Logging("Reading template file for DTO...");
            string contentDTO = File.ReadAllText("templates/entity/DTO.tmp").Replace(Convention.PROJECT_NAME, projectName);
            Logging("Reading template file for mapper...");
            string contentMapper = File.ReadAllText("templates/entity/ConfigAutoMapper.tmp").Replace(Convention.PROJECT_NAME, projectName);

            string usingConent = string.Empty;
            string mapperConent = string.Empty;
            foreach (EntityModel entityModel in listEntity)
            {
                Logging($"Generate class for {entityModel.Entity}");
                string pathEntity = Path.Combine(pathApplicationProject, entityModel.Entity);
                Directory.CreateDirectory(pathEntity);

                #region services
                bool isHadCategory = entityModel.Dependency.Count(x => x.Entity.Contains("Category")) > 0 || entityModel.Columns.Count(x => x.Name.Contains("CategoryId")) > 0;
                string contentClass = isHadCategory ? contentServiceWithCategory : contentService;

                string columnDTO = string.Empty;
                string changeFunc = string.Empty;
                foreach (ColumnModel columnModel in entityModel.Columns)
                {
                    if (!filterColumns.Contains(columnModel.Name) && columnModel.Name != "ID")
                    {
                        columnDTO += $"dto.{columnModel.Name},\n";
                    }
                    if (!filterColumns2.Contains(columnModel.Name))
                    {
                        changeFunc += $"{entityModel.Entity.FirstCharToLowerCase()}.Change{columnModel.Name}(dto.{columnModel.Name});\n";
                    }
                }
                columnDTO = columnDTO.Remove(columnDTO.Length - 2);

                string content = contentClass.
                    Replace(Convention.TABLE_NAME, entityModel.Entity).
                    Replace(Convention.TABLE_NAME_VARIBLE, entityModel.Entity.FirstCharToLowerCase()).
                    Replace(Convention.CONTENT_COLUMN, columnDTO).
                    Replace(Convention.CONTENT_CHANGE_FUNC, changeFunc);
                File.WriteAllText(Path.Combine(pathEntity, $"{entityModel.Entity}Service.cs"), content);
                #endregion

                #region DTO
                string column = string.Empty;
                foreach (ColumnModel columnModel in entityModel.Columns)
                {
                    if (!columnModel.IsNullable && (columnModel.TypeData == SQLDbType.NVarChar || columnModel.TypeData == SQLDbType.VarChar || columnModel.TypeData == SQLDbType.Char || columnModel.TypeData == SQLDbType.NChar))
                    {
                        int maxLenght = columnModel.TypeData == SQLDbType.VarChar || columnModel.TypeData == SQLDbType.NVarChar ? columnModel.MaxLenght / 2 : columnModel.MaxLenght;
                        column += $"[Required]\n" +
                            $"[MaxLength({maxLenght})]\n";
                    }
                    column += $"public {ColumnModel.GetTypeToCSharpTypeString(columnModel.TypeData, columnModel.IsNullable)} {columnModel.Name} {{ get; set; }}\n\n";
                }
                content = contentDTO.
                    Replace(Convention.TABLE_NAME, entityModel.Entity).
                    Replace(Convention.CONTENT_COLUMN, column);
                File.WriteAllText(Path.Combine(pathEntity, $"{entityModel.Entity}DTO.cs"), content);
                #endregion

                #region Mapper
                usingConent += $"using {projectName}.application.{entityModel.Entity};\n";
                usingConent += $"using {projectName}.domain.entity.{entityModel.Entity};\n";

                mapperConent += $"CreateMap<{entityModel.Entity}, {entityModel.Entity}DTO>();\n";
                #endregion
            }

            Logging($"Generate class for Config AutoMapper");
            contentMapper = contentMapper.
                Replace(Convention.PROJECT_NAME, projectName).
                Replace(Convention.CONTENT_USING, usingConent).
                Replace(Convention.CONTENT, mapperConent);
            File.WriteAllText(Path.Combine(pathApplicationProject, "ConfigAutoMapper.cs"), contentMapper);
        }

        public static void GenerateTestProject(string path, string projectName, EntityModel[] listEntity)
        {
            string pathTestProject = Path.Combine(path, $"{projectName}.test");
            // Generate entities
            Logging("Reading template file for test...");
            string contentResponsitory = File.ReadAllText("templates/entity/ResponsitoryTest.tmp").Replace(Convention.PROJECT_NAME, projectName);
            string contentService = File.ReadAllText("templates/entity/ServiceTest.tmp").Replace(Convention.PROJECT_NAME, projectName);

            foreach (EntityModel entityModel in listEntity)
            {
                Logging($"Generate test class for {entityModel.Entity}");
                string contentColumn = string.Empty;
                string contentColumnService = string.Empty;
                foreach (ColumnModel columnModel in entityModel.Columns)
                {
                    if (columnModel.IsNullable)
                    {
                        contentColumn += "null,\n";
                        contentColumnService += "null,\n";
                        continue;
                    }
                    switch (columnModel.TypeData)
                    {
                        case SQLDbType.BigInt:
                            contentColumn += "1221569623443374080,";
                            contentColumnService += $"{columnModel.Name} = 1221569623443374080,";
                            break;
                        case SQLDbType.Int:
                        case SQLDbType.SmallInt:
                            int value = new Random().Next(0, 10);
                            contentColumn += $"{value},";
                            contentColumnService += $"{columnModel.Name} = {value},";
                            break;
                        case SQLDbType.VarChar:
                        case SQLDbType.Char:
                        case SQLDbType.NChar:
                        case SQLDbType.NVarChar:
                            string contentString = columnModel.Name.Contains("SEO") ? DataHelper.ToSeoFriendly(DataHelper.GenerateLoremIpsum(3, 10)) : DataHelper.GenerateLoremIpsum(3, 10);
                            if (columnModel.Name.Contains("Image")) contentString = DataHelper.GenerateImageUrl();
                            contentColumn += $"\"{contentString}\",";
                            contentColumnService += $"{columnModel.Name} = \"{contentString}\",";
                            break;
                        case SQLDbType.DateTime:
                            contentColumn += $"\"{DateTime.Now.ToString("yyyy/MM/dd")}\",";
                            contentColumnService += $"{columnModel.Name} = \"{DateTime.Now.ToString("yyyy/MM/dd")}\",";
                            break;
                    }
                    contentColumn += "\n";
                    contentColumnService += "\n";
                }
                contentColumn = contentColumn.Remove(contentColumn.Length - 2);
                contentColumnService = contentColumnService.Remove(contentColumn.Length - 2);
                string content = contentResponsitory.
                    Replace(Convention.TABLE_NAME, entityModel.Entity).
                    Replace(Convention.CONTENT_COLUMN, contentColumn);
                File.WriteAllText(Path.Combine(pathTestProject, $"{entityModel.Entity}ResponsitoryTest.cs"), content);

                string content2 = contentService.
                    Replace(Convention.TABLE_NAME, entityModel.Entity).
                    Replace(Convention.CONTENT_COLUMN, contentColumnService);
                File.WriteAllText(Path.Combine(pathTestProject, $"{entityModel.Entity}ServiceTest.cs"), content2);
            }
        }
    }
}
