using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoGenerateDDDProjectForNetCore.helpers
{
    public class FileHelper
    {
        public static void CreateDirectory(string basePath, string name)
        {
            string destPath = Path.Combine(basePath, name);
            if (!Directory.Exists(destPath))
            {
                Directory.CreateDirectory(destPath);
            }
            Directory.CreateDirectory(destPath);
        }

        public static void CreateDirectory(string path)
        {
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
            Directory.CreateDirectory(path);
        }

        public static void CopyDirectory(string sourcePath, string destPath)
        {
            DirectoryInfo dir = new DirectoryInfo(sourcePath);
            if (!dir.Exists)
            {
                throw new DirectoryNotFoundException(
                    "Source directory does not exist or could not be found: "
                    + sourcePath);
            }
            if (!Directory.Exists(destPath))
                Directory.CreateDirectory(destPath);

            FileInfo[] files = dir.GetFiles();
            foreach (FileInfo file in files)
            {
                string temppath = Path.Combine(destPath, file.Name);
                file.CopyTo(temppath, true);
            }

            DirectoryInfo[] dirs = dir.GetDirectories();
            foreach (DirectoryInfo subdir in dirs)
            {
                string temppath = Path.Combine(destPath, subdir.Name);
                CopyDirectory(subdir.FullName, temppath);
            }
        }

        public static void MakeProject(string sourcePath)
        {
            DirectoryInfo dir = new DirectoryInfo(sourcePath);
            if (!dir.Exists)
                throw new DirectoryNotFoundException(
                    "Source directory does not exist or could not be found: "
                    + sourcePath);

            DirectoryInfo[] dirs = dir.GetDirectories();
            FileInfo[] files = dir.GetFiles();
            foreach (FileInfo file in files)
            {
                string temppath = Path.Combine(sourcePath, file.Name.Replace(Convention.PROJECT_NAME, XMLSettings.ProjectName));
                file.MoveTo(temppath);
                File.WriteAllText(temppath, File.ReadAllText(temppath).Replace(Convention.PROJECT_NAME, XMLSettings.ProjectName));
            }

            foreach (DirectoryInfo subdir in dirs)
            {
                if (subdir.Name == "packages") continue;
                string temppath = Path.Combine(sourcePath, subdir.Name);
                MakeProject(subdir.FullName);
            }

            string newPath = Path.Combine(Directory.GetParent(sourcePath).FullName, Path.GetFileName(sourcePath).Replace(Convention.PROJECT_NAME, XMLSettings.ProjectName));
            if (sourcePath != newPath) Directory.Move(sourcePath, newPath);
        }

        public static string GetRecommendProjectName(string projectName)
        {
            StringBuilder builder = new StringBuilder();
            foreach (char c in projectName)
            {
                if (48 <= (int)c && (int)c <= 90)
                {
                    builder.Append(c);
                }
            }
            return builder.ToString();
        }
    }
}
